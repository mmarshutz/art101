// my notes turned into a javascript file... //

There are three different data types
Strings, Booleans, integers and Floats

Composite Data types: Arrays & Objects
Special Data Types: 

"Strings" - Any text that is wrapped by quotes.
    Examples: "Hello World!" "A block of text..." "4,5"

Numbers (Integers or flotaing point numbers)
There are not quotes...
    Example: 5, 3450.0, -0.000056789

Booleans (True/False Values)
These are special words and not capitalized
    Example: true, false
boolans are typically used to check if something exist or to compare...
dogs = 1 (assigns a variable)
dogs == 1 (check to see if dogs is 1, to ask a question)
true (we get a return telling us dogs is 1)

variable: pocket
reference: acknowleding it is in pocket
return: value coming back to be used

When you add a "string" to a math problem, it will combine the number as part
of the "string"
    Example: "5" + 3 = "53"
             "45" - 1 = "44" ! wut. unless you subtract?

var myNum = 10;

"var or let" used to declare a new variable
"myNum" variable name
"10" right-side expression whose value is set to variable

const name ="wes";
let thingThatChanges ="7"

shopList = ["string","string"]; (this creates an array/list)

shopList(array).push("string"); (this adds a variable to the array)

console.log(shopList[0]); (this references a particular index within an array)

shopList[variable] = "new variable"; (replaces a variable within the array with a new variable)

shopList.pop() (this just selects a random variable within an array)

JS Objects:

const cat = {};
cat.name = "Tiger";
cat.color = "orange";
cat.size = "small";
cat.says = function...
cat.purr();

cat = KEY
value = ARRAY (composite data type)

// Creating an Object starts with a blank one; {};
// The following are attributes: cat.name = ""; cat.color = ""; etc.

Creating an Object (object definitions are surrouned by {}) all at once:
key: 'VALUE'
const cat = {
    name: 'Tiger',
    color: 'orange',
    size: 'small',
};

Reference the elements of the object by entering NAME.

character.pets.dog (.pathway)

function kittyTalk() {
    console.log("meow");
}

var myMainRide = {
    make: "Hyundai",
    model: "Veloster",
    color: "Red",
    year: 2012,
    age

}

Function

WE START WITH THE WORD FUNCTION...

function myFunction (parameter) {
    some code here;
    return value;
}

function multiply (x, y) {
    return x * y;
}

"myFunction" & "multiply" are identifiers

Parameters (optional): You can call this function by x = 3, y = 4. These parameters are palceholders for values that are going to pass it.

You can define a function as a variable expresion

var myFunction = function (parameter) {
    some code here;
    return value;
}

var product = multiply (2, 5);

To call a functin we use the function name followed by parathenesis.

function sayMyName() {
    return "Wes";
}

document.write("My name is " + sayMyName());

Always a good practice to have great comments! Especially for functions.

/*
function:
Description: Returns the product of two numbers"
Parameters:
Returns:
*/

/** standard javascript comment... **/

Scope is the context in which code is exectued. Scope determines what variables a line of code has access to.

let, const (limits the scope of our variables)

let marginShift = 100;

NO MORE VAR...

Lecture: JavaScript Libraries

<script src="js/lab.js"></script>

If I wanted to use another, link the src="" to the desired library.

jquery.com (amazing library that makes programming much easier)

include "dependencies" that the library depends on.

Find a working demo and get it to work on your system and then modify it

You can't use HTTPS with HTTP...
Don't mix http:// with https:// (mixing secure and insecure content is a NONONO)

jQuery (a JavaScript library)

var slideShowElement = $("#carousel");

Whenever we ue jQuery, we use a $ (function that takes a string or html eleemtn as an arguement and returns a jQuery object)

ALWAYS TAKES/PASSES A STRING.

Similar to CSS.

$("#carousel") <Element by ID>
$(".wrap") <Element by CLASS>

DOM (Document Object Model)

You can use Pure JavaScript to manipulate the DOM.

document.geElementById('togglebutton)

First Step: Find the element

Second Step: jQuery (DOLLAR SIGN, $)

$("p") - return a list of elements with all paragraph tags

$(".my-class") - return a list of elements with class "my-class"

Third Step: "Element" or "El" because they are DOM ELEMENTS.

var bioEl = $("bio")

var newButton = $("<button>"); - nowhere on the page, we will have to find an element to put it in, and then append it.

var newButton = $("<button class='btn'>Press Me!</button>"); this shows they can have attributes, content, and multiple tags

// find an element
$("element")

// set the test 

// add class to our button


Fourth Step: \

// find the target element where we want to put it
$("")

//create a new element and assign it a variable

// insert the new element at the bottom of the target element


ALL IN ONE STEP:

$("#bio").append("<div>");